<div class="p-6">
  <!-- Breadcrumb -->
  <nav class="text-sm mb-6 text-gray-500">
    <ol class="flex items-center space-x-2">
      <li>
        <a href="/admin/dashboard" class="hover:underline text-gray-600">Admin</a>
      </li>
      <li>/</li>
      <li class="text-gray-800 font-medium">Products</li>
    </ol>
  </nav>

  <!-- Heading -->
  <div class="flex justify-between items-center mb-8 mt-10">
    <h1 class="text-xl font-semibold">Product Page</h1>
  </div>

  <!-- Top bar -->
  <div class="flex justify-end items-center mb-4 space-x-2">
    <input type="text" id="searchInput" placeholder="Search products..."
      class="px-3 py-2 border rounded-md w-64 focus:outline-none focus:ring focus:ring-blue-300">

    <a href="/admin/products/add"
      class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 inline-block">
      + Add Product
    </a>
  </div>

  <!-- Table -->
  <div class="bg-white shadow-md rounded-lg overflow-hidden mt-10">
    <table class="w-full text-left">
      <thead class="bg-gray-200 text-gray-600 text-sm uppercase">
        <tr>
          <th class="py-3 px-4">Image</th>
          <th class="py-3 px-4">Name</th>
          <th class="py-3 px-4">Flavour</th>
          <th class="py-3 px-4">Size</th>
          <th class="py-3 px-4">Price</th>
          <th class="py-3 px-4">Category</th>
          <th class="py-3 px-4">Brand</th>
          <th class="py-3 px-4 text-center">Actions</th>
        </tr>
      </thead>
      <tbody id="productTable">
  <% rows.forEach((row) => { %>
    <tr class="border-b hover:bg-gray-50 <%= !row.is_active ? 'opacity-50' : '' %>">
      <td class="py-3 px-4">
        <% if (row.images && row.images.length > 0) { %>
          <img src="<%= row.images[0] %>" class="h-12 w-12 rounded object-cover">
        <% } else { %>
          <span class="text-gray-400">No Image</span>
        <% } %>
      </td>
      <td class="py-3 px-4"><%= row.productTitle %></td>
      <td class="py-3 px-4"><%= row.flavour || '-' %></td>
      <td class="py-3 px-4"><%= row.size || '-' %></td>
      <td class="py-3 px-4">‚Çπ <%= row.discounted_price && row.discounted_price > 0 ? row.discounted_price : row.price %></td>
      <td class="py-3 px-4"><%= row.productCategory?.name || '-' %></td>
      <td class="py-3 px-4"><%= row.productBrand?.name || '-' %></td>
      <td class="py-3 px-4 text-center flex justify-center space-x-3">
        <% if (row.is_active) { %>
          <button class="deleteBtn" data-product="<%= row.productId %>" data-variant="<%= row._id %>">üóë</button>
        <% } else { %>
          <button class="restoreBtn" data-product="<%= row.productId %>" data-variant="<%= row._id %>">‚ôªÔ∏è</button>
        <% } %>
        <button class="editBtn"
            data-id="<%= row.productId %>"
            data-variantid="<%= row._id %>"
            data-title="<%= row.productTitle %>"
            data-description="<%= row.productDescription %>"
            data-category="<%= row.productCategory?._id %>"
            data-brand="<%= row.productBrand?._id %>"
            data-variants='<%- JSON.stringify(row.allVariants) %>'>
              ‚úèÔ∏è
        </button>

      </td>
    </tr>
  <% }) %>
</tbody>


    </table>
  </div>
</div>

<!-- Edit Product Modal -->
<div id="editModal"
  class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-lg w-4/5 p-6 relative max-h-[90vh] overflow-y-auto">
    <h2 class="text-xl font-semibold mb-4">Edit Product</h2>
    <form id="editProductForm" method="POST" enctype="multipart/form-data">
      <input type="hidden" name="id" id="editProductId">

      <!-- Product Info -->
      <div class="grid grid-cols-2 gap-4 mb-6">
        <div>
          <label class="block text-sm">Name</label>
          <input type="text" name="title" id="editName"
            class="w-full border rounded px-3 py-2">
        </div>
        <div>
          <label class="block text-sm">Category</label>
          <select name="category_id" id="editCategory" class="w-full border rounded px-3 py-2">
            <% categories.forEach(cat => { %>
              <option value="<%= cat._id %>"><%= cat.name %></option>
            <% }) %>
          </select>
        </div>
        <div>
          <label class="block text-sm">Brand</label>
          <select name="brand_id" id="editBrand" class="w-full border rounded px-3 py-2">
            <% brands.forEach(br => { %>
              <option value="<%= br._id %>"><%= br.name %></option>
            <% }) %>
          </select>
        </div>
        <div class="col-span-2">
          <label class="block text-sm">Description</label>
          <textarea name="description" id="editDescription" rows="3"
            class="w-full border rounded px-3 py-2"></textarea>
        </div>
      </div>

      <!-- Variants -->
      <h3 class="text-lg font-semibold mb-2">Variants</h3>
      <div id="variantEditContainer"></div>

      <!-- Buttons -->
      <div class="flex justify-end space-x-2 mt-6">
        <button type="button" id="closeEditModal"
          class="px-4 py-2 border rounded hover:bg-gray-100">Cancel</button>
        <button type="submit"
          class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save</button>
      </div>
    </form>
  </div>
</div>

<!-- Crop Modal -->
<div id="cropModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
  <div class="bg-white p-4 rounded shadow-lg w-[500px]">
    <h3 class="text-lg font-semibold mb-2">Crop Image</h3>
    <img id="cropImage" class="max-w-full max-h-[400px]">
    <div class="flex justify-end gap-2 mt-4">
      <button id="cropCancel" class="px-4 py-2 border rounded">Cancel</button>
      <button id="cropSave" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
    </div>
  </div>
</div>

<%- include('../partials/pagination.ejs',{currentPage , totalPages, query}) %>

<link  href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>


<script>
  const FLAVOURS = <%- JSON.stringify(flavours) %>;
  const SIZES = <%- JSON.stringify(sizes) %>;

  // -----------------------
  // Build Variants in Modal
  // -----------------------
  // Event delegation for edit buttons
document.addEventListener("click", (e) => {
  if (e.target.classList.contains("editBtn")) {
    const btn = e.target;

    document.getElementById('editModal').classList.remove('hidden');
    document.getElementById('editProductId').value = btn.dataset.id;
    document.getElementById('editName').value = btn.dataset.title;
    document.getElementById('editDescription').value = btn.dataset.description;
    document.getElementById('editCategory').value = btn.dataset.category || '';
    document.getElementById('editBrand').value = btn.dataset.brand || '';

    const variants = JSON.parse(btn.dataset.variants);
    const container = document.getElementById('variantEditContainer');
    container.innerHTML = "";

    variants.forEach((variant, idx) => {
      let flavourOptions = FLAVOURS.map(f =>
        `<option value="${f}" ${variant.flavour === f ? "selected" : ""}>${f}</option>`
      ).join("");

      let sizeOptions = SIZES.map(s =>
        `<option value="${s}" ${variant.size === s ? "selected" : ""}>${s}</option>`
      ).join("");

      let existingImagesHtml = "";
      if (variant.images && variant.images.length > 0) {
        existingImagesHtml = variant.images.map((img, i) => `
          <div class="relative inline-block mr-2 mb-2">
            <img src="${img}" class="w-24 h-24 object-cover rounded-md border">
            <button type="button"
                    class="absolute top-0 right-0 bg-red-500 text-white rounded-full px-1 text-xs removeExistingImage"
                    data-variant="${idx}" data-index="${i}">‚úï</button>
            <input type="hidden" name="existing_images_${idx}[]" value="${img}">
          </div>
        `).join("");
      } else {
        existingImagesHtml = `<p class="text-gray-400">No images</p>`;
      }

      const div = document.createElement("div");
      div.classList.add("bg-gray-50", "p-4", "rounded-md", "mb-4", "variantBox");
      div.id = `variant-${variant._id}`;

      div.innerHTML = `
        <h4 class="font-semibold mb-3 text-lg">Variant ${idx + 1}</h4>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium mb-1">Flavour</label>
            <select name="flavour[]" class="w-full border rounded px-3 py-2">${flavourOptions}</select>
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Size</label>
            <select name="size[]" class="w-full border rounded px-3 py-2">${sizeOptions}</select>
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Price</label>
            <input type="number" name="price[]" value="${variant.price || ''}" class="w-full border rounded px-3 py-2">
            <p class="text-red-500 text-sm mt-1 hidden" id="priceError_${idx}"></p>
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Discounted Price</label>
            <input type="number" name="discounted_price[]" value="${variant.discounted_price || ''}" class="w-full border rounded px-3 py-2">
            <p class="text-red-500 text-sm mt-1 hidden" id="discountError_${idx}"></p>
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Stock</label>
            <input type="number" name="stock[]" value="${variant.stock || ''}" class="w-full border rounded px-3 py-2">
            <p class="text-red-500 text-sm mt-1 hidden" id="stockError_${idx}"></p>
          </div>
        </div>

        <div class="mt-4">
          <label class="block text-sm font-medium mb-1">Existing Images</label>
          <div class="flex flex-wrap gap-2 mb-2">${existingImagesHtml}</div>

          <label class="block text-sm font-medium mb-1">Upload New Images</label>
          <input type="file" name="variant_images_${idx}[]" multiple accept="image/*"
            class="w-full border rounded px-3 py-2 imageInput">
          <div class="previewContainer flex gap-2 mt-2"></div>

          <p class="text-red-500 text-sm mt-1 hidden" id="imageError_${idx}"></p>
        </div>
      `;
      container.appendChild(div);
    });

    const targetVariantId = btn.dataset.variantid;
    const targetElement = document.getElementById(`variant-${targetVariantId}`);
    if (targetElement) {
      targetElement.scrollIntoView({ behavior: "smooth", block: "start" });
      targetElement.style.transition = "background 0.6s ease";
      targetElement.style.background = "#fff3cd";
      setTimeout(() => targetElement.style.background = "", 1000);
    }
  }
});


  // -----------------------
  // Remove Existing Images
  // -----------------------
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("removeExistingImage")) {
      e.preventDefault();
      e.target.closest("div").remove();
    }
  });

// -----------------------
// Cropper + Preview Logic
// -----------------------
let currentCropper = null;
let currentInput = null;
let cropQueue = [];

// When user selects images
document.addEventListener("change", (e) => {
  if (e.target.classList.contains("imageInput")) {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;

    currentInput = e.target;
    cropQueue = files; // put all into queue
    startNextCrop();
  }
});

function startNextCrop() {
  if (cropQueue.length === 0) return;

  const file = cropQueue.shift();
  const reader = new FileReader();
  reader.onload = (ev) => {
    const cropImage = document.getElementById("cropImage");
    cropImage.src = ev.target.result;

    // Show modal
    document.getElementById("cropModal").classList.remove("hidden");

    // Reset cropper after modal is visible
    if (currentCropper) currentCropper.destroy();
    setTimeout(() => {
      currentCropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1
      });
    }, 100);
  };
  reader.readAsDataURL(file);
}

// Cancel cropping
document.getElementById("cropCancel").addEventListener("click", () => {
  document.getElementById("cropModal").classList.add("hidden");
  if (currentCropper) currentCropper.destroy();
  currentCropper = null;

  // move to next file
  startNextCrop();
});

// Save cropped image
document.getElementById("cropSave").addEventListener("click", () => {
  if (!currentCropper || !currentInput) {
    document.getElementById("cropModal").classList.add("hidden");
    return;
  }

  currentCropper.getCroppedCanvas({ width: 500, height: 500 }).toBlob((blob) => {
    if (!blob) {
      document.getElementById("cropModal").classList.add("hidden");
      return;
    }

    const croppedFile = new File([blob], "cropped_" + Date.now() + ".png", { type: "image/png" });

    // keep previous files
    let files = currentInput._filesBackup ? Array.from(currentInput._filesBackup) : [];
    files.push(croppedFile);

    // limit to 3 images
    files = files.slice(0, 3);

    // update input
    const dt = new DataTransfer();
    files.forEach(f => dt.items.add(f));
    currentInput.files = dt.files;
    currentInput._filesBackup = dt.files;

    // show preview
    const previewContainer = currentInput.closest(".variantBox").querySelector(".previewContainer");
    previewContainer.innerHTML = "";
    files.forEach((file, index) => {
      const url = URL.createObjectURL(file);
      previewContainer.innerHTML += `
        <div class="relative inline-block">
          <img src="${url}" class="w-24 h-24 object-cover rounded-md border">
          <button type="button"
                  class="absolute top-0 right-0 bg-red-500 text-white rounded-full px-1 text-xs removeImage"
                  data-index="${index}">‚úï</button>
        </div>`;
    });

    // close modal + reset
    document.getElementById("cropModal").classList.add("hidden");
    currentCropper.destroy();
    currentCropper = null;

    // move to next file in queue
    startNextCrop();
  });
});

// Remove an uploaded image (before save)
document.addEventListener("click", (e) => {
  if (e.target.classList.contains("removeImage")) {
    const indexToRemove = parseInt(e.target.dataset.index, 10);
    const variantBox = e.target.closest(".variantBox");
    const imageInput = variantBox.querySelector(".imageInput");
    const previewContainer = variantBox.querySelector(".previewContainer");

    let files = Array.from(imageInput.files);
    files.splice(indexToRemove, 1);

    const dt = new DataTransfer();
    files.forEach(f => dt.items.add(f));
    imageInput.files = dt.files;
    imageInput._filesBackup = dt.files;

    // re-render previews
    previewContainer.innerHTML = "";
    files.forEach((file, index) => {
      const url = URL.createObjectURL(file);
      previewContainer.innerHTML += `
        <div class="relative inline-block">
          <img src="${url}" class="w-24 h-24 object-cover rounded-md border">
          <button type="button"
                  class="absolute top-0 right-0 bg-red-500 text-white rounded-full px-1 text-xs removeImage"
                  data-index="${index}">‚úï</button>
        </div>`;
    });
  }
});


// -----------------------
// Close Edit Modal & Reset
// -----------------------
document.getElementById('closeEditModal').addEventListener('click', () => {
  const modal = document.getElementById('editModal');
  modal.classList.add('hidden');

  // reset form
  document.getElementById('editProductForm').reset();

  // clear variant blocks
  document.getElementById('variantEditContainer').innerHTML = "";
});



  // -----------------------
  // Submit with Swal + Fetch
  // -----------------------
  document.getElementById('editProductForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    let allValid = true
    document.querySelectorAll('.variantBox').forEach((box,idx) => {
      if(!validateVariant(box,idx)) allValid = false
    })

    if(!allValid) return

    const productId = document.getElementById('editProductId').value;
    const formData = new FormData(this);

    try {
      const res = await fetch(`/admin/products/${productId}/edit`, { method: 'PATCH', body: formData });
      const data = await res.json();
      if (data.success) {
        Swal.fire({ icon: "success", title: "Updated!", text: data.message || "Product updated successfully" })
          .then(() => window.location.reload());
      } else {
        if(data.field === "variants") {
        Swal.fire({
          icon: "error",
          title: "Duplicate Variant",
          text: data.message || "Duplicate flavour + size is not allowed"
        });
        }else{
        Swal.fire({
          icon: "error",
          title: "Error",
          text: data.message || "Something went wrong"
        });
        }
      }
    } catch (err) {
      Swal.fire({ icon: "error", title: "Server Error", text: "Could not update product" });
    }
  });

  // -----------------------
// Delete with Swal + Fetch
// -----------------------
document.addEventListener("click", async (e) => {
  if (e.target.classList.contains("deleteBtn")) {
    const productId = e.target.dataset.product;
    const variantId = e.target.dataset.variant;

    Swal.fire({
      title: "Are you sure?",
      text: "This variant will be deactivated (not permanently deleted).",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, delete it",
      cancelButtonText: "Cancel"
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const res = await fetch(`/admin/products/${productId}/variants/${variantId}/delete`, {
            method: "DELETE",
          });
          const data = await res.json();

          if (data.success) {
            Swal.fire({ icon: "success", title: "Deleted!", text: data.message })
              .then(() => window.location.reload());
          } else {
            Swal.fire({ icon: "error", title: "Error", text: data.message || "Something went wrong" });
          }
        } catch (err) {
          Swal.fire({ icon: "error", title: "Server Error", text: "Could not delete variant" });
        }
      }
    });
  }
});

// Variant Restore
document.addEventListener("click", async (e) => {
  if (e.target.classList.contains("restoreBtn")) {
    const productId = e.target.dataset.product;
    const variantId = e.target.dataset.variant;

    Swal.fire({
      title: "Restore Variant?",
      text: "This will make the variant active again.",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "Yes, restore it",
      cancelButtonText: "Cancel"
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const res = await fetch(`/admin/products/${productId}/variants/${variantId}/restore`, {
            method: "PATCH",
          });
          const data = await res.json();

          if (data.success) {
            Swal.fire({ icon: "success", title: "Restored!", text: data.message })
              .then(() => window.location.reload());
          } else {
            Swal.fire({ icon: "error", title: "Error", text: data.message || "Something went wrong" });
          }
        } catch (err) {
          Swal.fire({ icon: "error", title: "Server Error", text: "Could not restore variant" });
        }
      }
    });
  }
});


////search 


  document.getElementById("searchInput").addEventListener("input", async function () {
  const query = this.value.trim();

  try {
    const url = query 
      ? `/admin/products/search?q=${encodeURIComponent(query)}` 
      : `/admin/products/search`; // üëà no query = return all

    const res = await fetch(url);
    const data = await res.json();

    if (data.success) {
      const tbody = document.getElementById("productTable");
      tbody.innerHTML = "";

      data.products.forEach(row => {
        const tr = document.createElement("tr");
        tr.className = `border-b hover:bg-gray-50 ${!row.is_active ? 'opacity-50' : ''}`;

        tr.innerHTML = `
          <td class="py-3 px-4">
            ${row.images && row.images.length > 0
              ? `<img src="${row.images[0]}" class="h-12 w-12 rounded object-cover">`
              : `<span class="text-gray-400">No Image</span>`}
          </td>
          <td class="py-3 px-4">${row.productTitle}</td>
          <td class="py-3 px-4">${row.flavour || '-'}</td>
          <td class="py-3 px-4">${row.size || '-'}</td>
          <td class="py-3 px-4">‚Çπ ${row.discounted_price && row.discounted_price > 0 ? row.discounted_price : row.price}</td>
          <td class="py-3 px-4">${row.productCategory?.name || '-'}</td>
          <td class="py-3 px-4">${row.productBrand?.name || '-'}</td>
          <td class="py-3 px-4 text-center flex justify-center space-x-3">
            ${row.is_active
              ? `<button class="deleteBtn" data-product="${row.productId}" data-variant="${row._id}">üóë</button>`
              : `<button class="restoreBtn" data-product="${row.productId}" data-variant="${row._id}">‚ôªÔ∏è</button>`}
            <button class="editBtn"
              data-id="${row.productId}"
              data-variantid="${row._id}"
              data-title="${row.productTitle}"
              data-description="${row.productDescription}"
              data-category="${row.productCategory?._id}"
              data-brand="${row.productBrand?._id}"
              data-variants='${JSON.stringify(row.allVariants)}'>
              ‚úèÔ∏è
            </button>
          </td>
        `;

        tbody.appendChild(tr);
      });
    }
  } catch (err) {
    console.error("Search failed", err);
  }
});

function validateVariant(box, idx) {
  let valid = true

  const priceError = document.getElementById(`priceError_${idx}`)
  const discountError = document.getElementById(`discountError_${idx}`)
  const stockError = document.getElementById(`stockError_${idx}`)
  const imageError1 = document.getElementById(`imageError_${idx}`)

  const price = box.querySelector('input[name="price[]"]').value.trim()
  const discounted = box.querySelector('input[name="discounted_price[]"]').value.trim()
  const stock = box.querySelector('input[name="stock[]"]').value.trim()

  const priceVal = Number(price);
  const discountedVal = Number(discounted);
  const stockVal = Number(stock);


  [priceError,discountError,stockError,imageError1].forEach(el => {
    if(el){
    el.classList.add("hidden")
    el.innerText =""
    }
  })

  if(!priceVal || priceVal <= 0) {
    if(priceError) {
    priceError.innerText = "Price is required and must be greater than 0"
    priceError.classList.remove("hidden")
    }
    valid = false
  }

  if (discounted && discountedVal < 0) {
    if (discountError) {
      discountError.innerText = "Discount price cannot be negative";
      discountError.classList.remove("hidden");
    }
    valid = false;
  }

  if(discounted && discountedVal >=priceVal) {
    if(discountError) {
    discountError.innerText = "Discount price must be less than price"
    discountError.classList.remove("hidden")
    }
    valid = false
  }

  if(!stockVal || stockVal < 0) {
    if(stockError) {
    stockError.innerText = "Stock is required and cannot be negative"
    stockError.classList.remove("hidden")
    }
    valid = false
  }

  const existingImages = box.querySelectorAll(`input[name="existing_images_${idx}[]"]`);
  const newImages = box.querySelector('.imageInput')?.files;

  if ((!existingImages || existingImages.length === 0) && (!newImages || newImages.length === 0)) {
    if(imageError1) {
    imageError1.innerText = "At least one image is required";
    imageError1.classList.remove("hidden");
    }
    valid = false;
  }

  return valid
}

// const products = <%-JSON.stringify(rows) %>

// const total = products.reduce((tot,p) =>{
//   const price = p.discounted_price
//   return tot+price
// })
// console.log('sum is :',sum)


</script>
