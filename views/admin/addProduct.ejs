<div class="p-6">
  <!-- Breadcrumb -->
  <nav class="text-sm mb-6 text-gray-500">
    <ol class="flex items-center space-x-2">
      <li>
        <a href="/admin/dashboard" class="hover:underline text-gray-600">Admin</a>
      </li>
      <li>/</li>
      <li class="text-gray-800 font-medium">Add Product</li>
    </ol>
  </nav>

  <!-- Card -->
  <div class="bg-white shadow-md rounded-lg p-6">
    <h1 class="text-lg font-semibold mb-4">Add Product</h1>

    <!-- form must POST to /products/add -->
    <form id="addProductForm" action="/admin/products/add" method="POST" enctype="multipart/form-data">
      <div class="grid grid-cols-2 gap-6">
        
        <!-- Left Section (common fields) -->
        <div class="space-y-4">
          <input type="text" name="title" placeholder="Product Title"
                 class="w-full border p-2 rounded-md" required>
          <div class="text-red-500 text-sm mt-1 titleError"></div>
          <textarea name="description" placeholder="Description"
                    class="w-full border p-2 rounded-md" required></textarea>

          <!-- Category -->
          <select name="category_id" class="w-full border p-2 rounded-md" required>
            <option value="">Select Category</option>
            <% categories.forEach(c => { %>
              <option value="<%= c._id %>"><%= c.name %></option>
            <% }) %>
          </select>

          <!-- Brand -->
          <select name="brand_id" class="w-full border p-2 rounded-md" required>
            <option value="">Select Brand</option>
            <% brands.forEach(b => { %>
              <option value="<%= b._id %>"><%= b.name %></option>
            <% }) %>
          </select>

        

          
        </div>

        <!-- Right Section (variants) -->
        <div class="space-y-4">
          <div id="variantContainer" class="space-y-4">
            <!-- First Variant -->
            <!-- Variant Box -->
<div class="variantBox border p-4 rounded-md relative">
  <button type="button" class="absolute top-2 right-2 text-red-500 removeVariant hidden">✕</button>

  <!-- Flavour -->
  <select name="flavour[]" class="w-full border p-2 rounded-md mt-2" required>
    <option value="">Select Flavour</option>
    <% flavours.forEach(f => { %>
      <option value="<%= f %>"><%= f %></option>
    <% }) %>
  </select>

  <!-- Size -->
  <select name="size[]" class="w-full border p-2 rounded-md mt-2" required>
    <option value="">Select Size</option>
    <% sizes.forEach(s => { %>
      <option value="<%= s %>"><%= s %></option>
    <% }) %>
  </select>

  <!-- Price -->
  <input type="number" name="price[]" placeholder="Price" class="w-full border p-2 rounded-md mt-2 priceInput"  required>
  <div class="text-red-500 text-sm mt-1 priceError"></div>

  <!-- Discount Price -->
  <input type="number" name="discounted_price[]" placeholder="Discounted Price" class="w-full border p-2 rounded-md mt-2 discountInput" >
  <div class="text-red-500 text-sm mt-1 discountError"></div>

  <!-- Stock -->
  <input type="number" name="stock[]" placeholder="Stock Quantity" class="w-full border p-2 rounded-md mt-2 stockInput"  required>
  <div class="text-red-500 text-sm mt-1 stockError"></div>

  <!-- Images -->
  <input type="file" name="variant_images_0[]" multiple accept="image/*"
         class="w-full border p-2 rounded-md mt-2 imageInput">
  <div class="text-red-500 text-sm mt-1 imageError"></div>       
  <div class="previewContainer flex gap-4 mt-2"></div>
</div>

          </div>

          <!-- Add Variant Button -->
          <button type="button" id="addVariantBtn"
                  class="bg-gray-200 px-4 py-2 rounded-md">
            + Add Variant
          </button>
        </div>
      </div>

      <!-- Actions -->
      <div class="flex space-x-2 mt-6">
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md">
          Add Product
        </button>
        <a href="/admin/products" 
           class="bg-red-600 text-white px-6 py-2 rounded-md">Cancel</a>
      </div>
    </form>
  </div>
</div>

<%- include('../partials/cropperScript.ejs') %>


<!-- JS for Variants & Image Preview -->
<script>
document.addEventListener("DOMContentLoaded", () => {
  const addBtn = document.getElementById("addVariantBtn");
  const container = document.getElementById("variantContainer");
  let variantIndex = 1; // start from 1 since 0 is already rendered

  // -------------------------------
  // Add Variant
  // -------------------------------
  addBtn.addEventListener("click", () => {
    const firstVariant = container.firstElementChild;
    const newVariant = firstVariant.cloneNode(true);

    // Reset all input values
    newVariant.querySelectorAll("input, select").forEach(el => el.value = "");
    newVariant.querySelector(".previewContainer").innerHTML = "";

    // Update file input name
    const fileInput = newVariant.querySelector(".imageInput");
    fileInput.name = `variant_images_${variantIndex}[]`;
    variantIndex++;

    // Show remove button
    newVariant.querySelector(".removeVariant").classList.remove("hidden");

    container.appendChild(newVariant);
  });

  // -------------------------------
  // Remove Variant
  // -------------------------------
  container.addEventListener("click", (e) => {
    if (e.target.classList.contains("removeVariant")) {
      e.target.closest(".variantBox").remove();
    }
  });

  // -------------------------------
  // Image Preview with Add/Remove
  // -------------------------------
  function handleImagePreview(imageInput, previewContainer, keepExisting = true) {
    let currentFiles = [];

    if (keepExisting && imageInput._filesBackup) {
      currentFiles = Array.from(imageInput._filesBackup);
    }

    const newFiles = Array.from(imageInput.files);
    currentFiles = currentFiles.concat(newFiles).slice(0, 3); // max 3 files

    const dt = new DataTransfer();
    currentFiles.forEach(file => dt.items.add(file));
    imageInput.files = dt.files;
    imageInput._filesBackup = dt.files;

    previewContainer.innerHTML = "";
    currentFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const div = document.createElement("div");
        div.classList.add("relative", "inline-block");
        div.innerHTML = `
          <img src="${e.target.result}" class="w-24 h-24 object-cover rounded-md border">
          <button type="button" 
                  class="absolute top-0 right-0 bg-red-500 text-white rounded-full px-1 text-xs removeImage"
                  data-index="${index}">✕</button>
        `;
        previewContainer.appendChild(div);
      };
      reader.readAsDataURL(file);
    });
  }

  // -------------------------------
  // Remove Image
  // -------------------------------
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("removeImage")) {
      const indexToRemove = parseInt(e.target.dataset.index, 10);
      const variantBox = e.target.closest(".variantBox");
      const imageInput = variantBox.querySelector(".imageInput");
      const previewContainer = variantBox.querySelector(".previewContainer");

      let files = Array.from(imageInput.files);
      files.splice(indexToRemove, 1);

      const dt = new DataTransfer();
      files.forEach(f => dt.items.add(f));
      imageInput.files = dt.files;
      imageInput._filesBackup = dt.files;

      handleImagePreview(imageInput, previewContainer, false);
    }
  });

  // -------------------------------
  // Cropper.js Integration
  // -------------------------------
  let currentCropper = null;
  let currentInput = null;
  let cropQueue = [];

  document.addEventListener("change", (e) => {
    if (e.target.classList.contains("imageInput")) {
      const files = Array.from(e.target.files);
      if (files.length === 0) return;
      currentInput = e.target;
      cropQueue = files;
      startNextCrop();
    }
  });

  function startNextCrop() {
    if (cropQueue.length === 0) return;
    const file = cropQueue.shift();
    const reader = new FileReader();
    reader.onload = (ev) => {
      const cropModal = document.getElementById("cropModal");
      const cropImage = document.getElementById("cropImage");
      cropImage.src = ev.target.result;
      cropModal.classList.remove("hidden");

      if (currentCropper) currentCropper.destroy();
      currentCropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 1
      });
    };
    reader.readAsDataURL(file);
  }

  document.getElementById("cropCancel").addEventListener("click", () => {
    document.getElementById("cropModal").classList.add("hidden");
    if (currentCropper) currentCropper.destroy();
    currentCropper = null;
    startNextCrop();
  });

  document.getElementById("cropSave").addEventListener("click", () => {
    if (!currentCropper || !currentInput) return;
    currentCropper.getCroppedCanvas({
      width: 500,
      height: 500,
    }).toBlob((blob) => {
      const croppedFile = new File(
        [blob],
        "cropped_" + Date.now() + ".png",
        { type: "image/png", lastModified: new Date().getTime() }
      );

      let files = currentInput._filesBackup ? Array.from(currentInput._filesBackup) : [];
      files.push(croppedFile);
      files = files.slice(0, 3);

      const dt = new DataTransfer();
      files.forEach(f => dt.items.add(f));
      currentInput.files = dt.files;
      currentInput._filesBackup = dt.files;

      // Re-render preview with cropped image
      const variantBox = currentInput.closest(".variantBox");
      const previewContainer = variantBox.querySelector(".previewContainer");
      handleImagePreview(currentInput, previewContainer, false);

      document.getElementById("cropModal").classList.add("hidden");
      currentCropper.destroy();
      currentCropper = null;
      startNextCrop();
    });
  });

  // -------------------------------
  // Variant Validation
  // -------------------------------
  function validateVariant(variantBox) {
    let isValid = true;
    const priceInput = variantBox.querySelector('.priceInput');
    const discountInput = variantBox.querySelector('.discountInput');
    const stockInput = variantBox.querySelector('.stockInput');
    const imageInput = variantBox.querySelector('.imageInput');

    const priceError = variantBox.querySelector('.priceError');
    const discountError = variantBox.querySelector('.discountError');
    const stockError = variantBox.querySelector('.stockError');
    const imageError = variantBox.querySelector('.imageError');

    priceError.textContent = '';
    discountError.textContent = '';
    stockError.textContent = '';
    imageError.textContent = '';

    const price = parseFloat(priceInput.value) || 0;
    const discount = parseFloat(discountInput.value) || 0;
    const stock = parseInt(stockInput.value) || 0;
    const files = imageInput.files || [];

    if (discount > 0 && price <= discount) {
      discountError.textContent = 'Discount price must be less than price';
      isValid = false;
    }
    if (stock <= 0) {
      stockError.textContent = 'Stock quantity must be greater than 0';
      isValid = false;
    }
    if (!files.length) {
      imageError.textContent = 'Please upload at least one image';
      isValid = false;
    }
    return isValid;
  }

  // -------------------------------
  // AJAX Submit with Swal
  // -------------------------------
  document.getElementById("addProductForm").addEventListener("submit", async function(e) {
    e.preventDefault();

    let allValid = true;
    document.querySelectorAll(".variantBox").forEach(box => {
      if (!validateVariant(box)) allValid = false;
    });

    if (!allValid) {
      Swal.fire({
        icon: "error",
        title: "Validation Error",
        text: "Please fix the errors before submitting"
      });
      return;
    }

    const formData = new FormData(this);

    try {
      const res = await fetch(this.action, { method: "POST", body: formData });
      const data = await res.json();

      if (data.success) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message
        }).then(() => window.location.href = "/admin/products");
      } else {
        if (data.field === "variants") {
          document.querySelector(".titleError").textContent = data.message;
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message || "Something went wrong"
          });
        }
      }
    } catch (err) {
      Swal.fire({
        icon: "error",
        title: "Server Error",
        text: "Could not add product"
      });
    }
  });
});
</script>

